package tn.esprit.controller;


import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import tn.esprit.models.Question;
import tn.esprit.services.ServiceQuestion;

public class QuizController {
    private final ServiceQuestion questionService = new ServiceQuestion();

    @FXML private TextField questionNumberField;
    @FXML private TextField questionField;
    @FXML private TextField answer1Field;
    @FXML private TextField answer2Field;
    @FXML private TextField answer3Field;
    @FXML private TextField answer4Field;
    @FXML private ComboBox<String> correctAnswerCombo;
    @FXML private ListView<Question> questionListView;
    @FXML private TextField searchField;
    @FXML private ProgressBar xpProgressBar;
    @FXML private Label xpLabel;

    private final ObservableList<Question> questions = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        // Configure list view
        questionListView.setItems(questions);
        questionListView.setCellFactory(lv -> new ListCell<>() {
            @Override
            protected void updateItem(Question item, boolean empty) {
                super.updateItem(item, empty);
                setText(empty ? null : String.format("Q%d: %s", item.getQno(), item.getQuestion()));
            }
        });

        // Load initial data
        refreshQuestionList();

        // Configure correct answer combo
        correctAnswerCombo.getItems().addAll("A", "B", "C", "D");
    }

    private void refreshQuestionList() {
        questions.setAll(questionService.getQuestions());
    }

    private boolean validateInput() {
        if (questionNumberField.getText().isEmpty() ||
                questionField.getText().isEmpty() ||
                answer1Field.getText().isEmpty() ||
                answer2Field.getText().isEmpty() ||
                answer3Field.getText().isEmpty() ||
                answer4Field.getText().isEmpty() ||
                correctAnswerCombo.getValue() == null) {

            showAlert("Validation Error", "All fields are required!");
            return false;
        }

        try {
            Integer.parseInt(questionNumberField.getText());
        } catch (NumberFormatException e) {
            showAlert("Validation Error", "Question number must be a valid integer!");
            return false;
        }

        String correctAnswer = correctAnswerCombo.getValue();
        if (!correctAnswer.matches("[A-D]")) {
            showAlert("Validation Error", "Correct answer must be A, B, C, or D!");
            return false;
        }

        return true;
    }

    @FXML
    private void handleAddQuestion() {
        if (!validateInput()) return;

        Question newQuestion = new Question(
                0, // ID will be generated by database
                Integer.parseInt(questionNumberField.getText()),
                questionField.getText(),
                answer1Field.getText(),
                answer2Field.getText(),
                answer3Field.getText(),
                answer4Field.getText(),
                correctAnswerCombo.getValue()
        );

        if (questionService.addQuestion(newQuestion)) {
            refreshQuestionList();
            clearFields();
        } else {
            showAlert("Error", "Failed to add question!");
        }
    }

    @FXML
    private void handleUpdateQuestion() {
        Question selected = questionListView.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showAlert("Selection Error", "Please select a question to update!");
            return;
        }

        if (!validateInput()) return;

        selected.setQno(Integer.parseInt(questionNumberField.getText()));
        selected.setQuestion(questionField.getText());
        selected.setReponse1(answer1Field.getText());
        selected.setReponse2(answer2Field.getText());
        selected.setReponse3(answer3Field.getText());
        selected.setReponse4(answer4Field.getText());
        selected.setReponseCorrecte(correctAnswerCombo.getValue());

        if (questionService.updateQuestion(selected)) {
            refreshQuestionList();
        } else {
            showAlert("Error", "Failed to update question!");
        }
    }

    @FXML
    private void handleDeleteQuestion() {
        Question selected = questionListView.getSelectionModel().getSelectedItem();
        if (selected == null) {
            showAlert("Selection Error", "Please select a question to delete!");
            return;
        }

        if (questionService.deleteQuestion(selected.getQid())) {
            refreshQuestionList();
            clearFields();
        } else {
            showAlert("Error", "Failed to delete question!");
        }
    }

    @FXML
    private void handleSearch() {
        String searchText = searchField.getText().toLowerCase();
        if (searchText.isEmpty()) {
            refreshQuestionList();
            return;
        }

        questions.setAll(questionService.getQuestions().stream()
                .filter(q -> q.getQuestion().toLowerCase().contains(searchText))
                .toList());
    }

    private void clearFields() {
        questionNumberField.clear();
        questionField.clear();
        answer1Field.clear();
        answer2Field.clear();
        answer3Field.clear();
        answer4Field.clear();
        correctAnswerCombo.getSelectionModel().clearSelection();
    }

    private void showAlert(String title, String content) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(content);
        alert.showAndWait();
    }
}